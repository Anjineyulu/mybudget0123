<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>org.fortytwo.developers</groupId>
   <artifactId>mybudget0123</artifactId>
   <packaging>war</packaging>
   <version>1.0-SNAPSHOT</version>
   <name>MyBudget0123</name>
   <properties>
      <gaeVersion>1.8.1</gaeVersion>
      <gwtVersion>2.5.1</gwtVersion>
      <datanucleusVersion>1.1.5</datanucleusVersion>
      <slf4jVersion>1.5.11</slf4jVersion>
      <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   </properties>
   <dependencies>
<!--       <\!-\- SLF4J logging libraries -\-> -->
<!--       <dependency> -->
<!--          <groupId>org.slf4j</groupId> -->
<!--          <artifactId>slf4j-api</artifactId> -->
<!--          <version>${slf4jVersion}</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <\!-\- any library that uses commons-logging will be directed to slf4j -\-> -->
<!--          <groupId>org.slf4j</groupId> -->
<!--          <artifactId>jcl-over-slf4j</artifactId> -->
<!--          <version>${slf4jVersion}</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <\!-\- any library that uses slf4j will be directed to java.util.logging -\-> -->
<!--          <groupId>org.slf4j</groupId> -->
<!--          <artifactId>slf4j-jdk14</artifactId> -->
<!--          <version>${slf4jVersion}</version> -->
<!--       </dependency> -->
<!--       <\!-\- End SLF4J logging libraries -\-> -->
<!--       <\!-\- Libraries used for testing -\-> -->
<!--       <dependency> -->
<!--          <groupId>junit</groupId> -->
<!--          <artifactId>junit</artifactId> -->
<!--          <version>4.7</version> -->
<!--          <scope>test</scope> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>org.mockito</groupId> -->
<!--          <artifactId>mockito-all</artifactId> -->
<!--          <version>1.9.0</version> -->
<!--          <scope>test</scope> -->
<!--       </dependency> -->
      <!-- End Libraries used for testing -->
<!--       <\!-\- PayPal libraries -\-> -->
<!--       <dependency> -->
<!--          <groupId>com.paypal</groupId> -->
<!--          <artifactId>adaptive-payments-gae</artifactId> -->
<!--          <version>0.7.88</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>com.paypal</groupId> -->
<!--          <artifactId>auth-signature</artifactId> -->
<!--          <version>1.0</version> -->
<!--       </dependency> -->
<!--       <\!-\- End PayPal libraries -\-> -->
<!--       <dependency> -->
<!--          <\!-\- lucene must come before the appengine-api-1.0-sdk on the classpath during compilation because -->
<!--    of a namespace clash. maven uses order in pom to determine order of jars on classpath. -->
<!--    our project needs 3.4.0 but the appengine-api-sdk jar bundles 2.9 -->
<!--    See http://code.google.com/p/googleappengine/issues/detail?id=8451 -\-> -->
<!--          <groupId>org.apache.lucene</groupId> -->
<!--          <artifactId>lucene-analyzers</artifactId> -->
<!--          <version>3.4.0</version> -->
<!--       </dependency> -->
      <!-- Google App Engine libraries -->
      <dependency>
         <!-- this library provides the core appengine features -->
         <groupId>com.google.appengine</groupId>
         <artifactId>appengine-api-1.0-sdk</artifactId>
         <version>${gaeVersion}</version>
      </dependency>
      <dependency>
         <!-- this library provides experimental appengine features -->
         <groupId>com.google.appengine</groupId>
         <artifactId>appengine-api-labs</artifactId>
         <version>${gaeVersion}</version>
      </dependency>
      <dependency>
         <!-- required for app engine based unit tests -->
         <groupId>com.google.appengine</groupId>
         <artifactId>appengine-testing</artifactId>
         <version>${gaeVersion}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- required for app engine based unit tests -->
         <groupId>com.google.appengine</groupId>
         <artifactId>appengine-api-stubs</artifactId>
         <version>${gaeVersion}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- required for app engine based unit tests -->
         <groupId>com.google.appengine</groupId>
         <artifactId>appengine-tools-sdk</artifactId>
         <version>${gaeVersion}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Google App Engine supports both JPA1 and JPA2.
   JPA1: datanucleus appengine plugin v1 (1.0.10) + datanucleus v1 (1.1.5)
   JPA2: datanucleus appengine plugin v2 (2.1.1) + datanucleus v3 (3.1.1) -->
         <groupId>com.google.appengine.orm</groupId>
         <artifactId>datanucleus-appengine</artifactId>
         <version>1.0.10</version>
      </dependency>
<!--      <dependency> -->
<!--          <\!-\- datanucleus-core is not needed for compilation. in fact, it cannot have compile  -->
<!--    scope because the datanucleus plugin automatically adds it during enhancement and complains -->
<!--    if there are two copies. app should not depend on any classes in this lib anyways. -\-> -->
<!--          <groupId>org.datanucleus</groupId> -->
<!--          <artifactId>datanucleus-core</artifactId> -->
<!--          <version>${datanucleusVersion}</version> -->
<!--          <scope>runtime</scope> -->
<!--          <exclusions> -->
<!--             <exclusion> -->
<!--                <groupId>javax.transaction</groupId> -->
<!--                <artifactId>transaction-api</artifactId> -->
<!--             </exclusion> -->
<!--          </exclusions> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <\!-\- datanucleus-jpa is needed during compilation for its  -->
<!--    @Extension annotation which is used throughout entity classes -\-> -->
<!--          <groupId>org.datanucleus</groupId> -->
<!--          <artifactId>datanucleus-jpa</artifactId> -->
<!--          <version>${datanucleusVersion}</version> -->
<!--       </dependency> -->
      <dependency>
         <!-- normally this library is only needed when using JDO however datanucleus throws 
   some JDO exceptions even when using JPA. there are several places in our code that 
   explicitly catch these JDO exceptions therefore it is needed during compilation -->
         <groupId>javax.jdo</groupId>
         <artifactId>jdo2-api</artifactId>
         <version>2.3-eb</version>
         <exclusions>
            <exclusion>
               <groupId>javax.transaction</groupId>
               <artifactId>transaction-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <!-- End Google App Engine libraries -->
      <!-- GWT libraries -->
      <dependency>
         <!-- this library provides classes required by GWT-RPC servlets on the server -->
         <groupId>com.google.gwt</groupId>
         <artifactId>gwt-servlet</artifactId>
         <version>${gwtVersion}</version>
         <scope>runtime</scope>
      </dependency>
      <dependency>
         <groupId>com.google.gwt</groupId>
         <artifactId>gwt-user</artifactId>
         <version>${gwtVersion}</version>
         <scope>provided</scope>
      </dependency>
<!--       <dependency> -->
<!--          <\!-\- Hibernate Validator is used for validation in the client and on the server -\-> -->
<!--          <groupId>org.hibernate</groupId> -->
<!--          <artifactId>hibernate-validator</artifactId> -->
<!--          <version>4.0.2.GA</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <\!-\- this has a scope of provided because the Hibernate Validator sources must -->
<!--    be on the classpath during gwt:compile but it shouldnt be bundled with the war -\-> -->
<!--          <groupId>org.hibernate</groupId> -->
<!--          <artifactId>hibernate-validator</artifactId> -->
<!--          <version>4.0.2.GA</version> -->
<!--          <classifier>sources</classifier> -->
<!--          <scope>provided</scope> -->
<!--       </dependency> -->
<!--       <\!-\- End GWT libraries -\-> -->
<!--       <dependency> -->
<!--          <groupId>commons-codec</groupId> -->
<!--          <artifactId>commons-codec</artifactId> -->
<!--          <version>1.6</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>org.apache.commons</groupId> -->
<!--          <artifactId>commons-lang3</artifactId> -->
<!--          <version>3.1</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>commons-io</groupId> -->
<!--          <artifactId>commons-io</artifactId> -->
<!--          <version>2.4</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>net.sourceforge.htmlunit</groupId> -->
<!--          <artifactId>htmlunit</artifactId> -->
<!--          <version>2.10</version> -->
<!--          <exclusions> -->
<!--             <exclusion> -->
<!--                <groupId>commons-logging</groupId> -->
<!--                <artifactId>commons-logging</artifactId> -->
<!--             </exclusion> -->
<!--          </exclusions> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>com.rosaloves</groupId> -->
<!--          <artifactId>bitlyj</artifactId> -->
<!--          <version>2.0.0</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>com.sun.jersey</groupId> -->
<!--          <artifactId>jersey-servlet</artifactId> -->
<!--          <version>1.14</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>org.codehaus.jackson</groupId> -->
<!--          <artifactId>jackson-jaxrs</artifactId> -->
<!--          <version>1.9.7</version> -->
<!--       </dependency> -->
<!--       <dependency> -->
<!--          <groupId>org.apache.velocity</groupId> -->
<!--          <artifactId>velocity</artifactId> -->
<!--          <version>1.7</version> -->
<!--       </dependency> -->
   </dependencies>
   <build>
      <!-- Compiled java classes and all the resources get dumped into 
  target/${webappDirectory}/WEB-INF/classes during the build -->
      <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>
      <resources>
         <resource>
            <directory>src/main/resources</directory>
         </resource>
         <resource>
            <!-- the java source files must be on the classpath during gwt:compile -->
            <directory>src/main/java</directory>
         </resource>
<!--          <resource> -->
<!--             <\!-\- the java source files that override/emulate server-side classes -->
<!--     in the client must be on the classpath during gwt:compile -\-> -->
<!--             <directory>src/main/super</directory> -->
<!--          </resource> -->
      </resources>
      <testResources>
         <testResource>
            <directory>src/test/resources</directory>
         </testResource>
      </testResources>
      <plugins>
         <plugin>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-maven-plugin</artifactId>
            <version>${gaeVersion}</version>
         </plugin>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>gwt-maven-plugin</artifactId>
            <version>${gwtVersion}</version>
            <executions>
               <execution>
                  <!-- gwt:compile happens just before package phase -->
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>compile</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <modules>
                  <!-- Marketplace gwt module inherits Core gwt module therefore both will be gwt:compiled -->
                  <module>org.fortytwo.developers.mybudget0123.client.MyBudget0123</module>
               </modules>
               <runTarget>MyBudget0123.html</runTarget>
               <appEngineVersion>${gaeVersion}</appEngineVersion>
               <appEngineHome>/Applications/eclipse/plugins/com.google.appengine.eclipse.sdkbundle_${gaeVersion}/appengine-java-sdk-${gaeVersion}</appEngineHome>
               <!-- tell the gwt plugin that the webapp source resides in src/main/webapp -->
               <webappDirectory>${webappDirectory}</webappDirectory>
               <!-- tell the gwt plugin that dev mode should be run using the webapp that resides in target/${webappDirectory} -->
               <hostedWebapp>${webappDirectory}</hostedWebapp>
               <!-- Normally the gwt maven plugin executes dev mode using a builtin jetty server.
     This config property instructs the gwt maven plugin to execute dev mode using the 
     jetty server supplied by the appengine sdk. -->
               <server>com.google.appengine.tools.development.gwt.AppEngineLauncher</server>
            </configuration>
         </plugin>
         <plugin>
            <!-- Copies static web files from src/main/webapp to target/${webappDirectory} -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.1.1</version>
            <executions>
               <execution>
                  <!-- the exploded goal gets executed during compile phase -->
                  <phase>compile</phase>
                  <goals>
                     <goal>exploded</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <!-- the exploded war structure ends up in target/${webappDirectory} -->
               <webappDirectory>${webappDirectory}</webappDirectory>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>2.3.2</version>
            <configuration>
               <source>1.6</source>
               <target>1.6</target>
            </configuration>
         </plugin>
<!--          <plugin> -->
<!--             <groupId>org.datanucleus</groupId> -->
<!--             <artifactId>maven-datanucleus-plugin</artifactId> -->
<!--             <version>1.1.4</version> -->
<!--             <configuration> -->
<!--                <api>JPA</api> -->
<!--                <mappingIncludes>net/styleguise/marketplace/core/shared/**/*.class, -->
<!--       net/styleguise/marketplace/server/**/*.class</mappingIncludes> -->
<!--                <verbose>true</verbose> -->
<!--             </configuration> -->
<!--             <executions> -->
<!--                <execution> -->
<!--                   <\!-\- classes get enhanced immediately after compile phase -\-> -->
<!--                   <phase>process-classes</phase> -->
<!--                   <goals> -->
<!--                      <goal>enhance</goal> -->
<!--                   </goals> -->
<!--                </execution> -->
<!--             </executions> -->
<!--             <dependencies> -->
<!--                <dependency> -->
<!--                   <\!-\- enhancement requires the gwt-user jar because many of the entity classes implement  -->
<!--       IsSerializable and the enhancer needs it on the classpath to function. because the  -->
<!--       gwt-user library has a scope of provided, it is only available on the compilation  -->
<!--       and test classpath, and is not transitive to the ehancement classpath.-\-> -->
<!--                   <groupId>com.google.gwt</groupId> -->
<!--                   <artifactId>gwt-user</artifactId> -->
<!--                   <version>${gwtVersion}</version> -->
<!--                </dependency> -->
<!--                <\!-\- <dependency> -\-> -->
<!-- <\!-\-                   <\\!-\- force maven-datanucleus-plugin to use the same version of datanucleus-core -\\-> -\-> -->
<!-- <\!-\-                   <groupId>org.datanucleus</groupId> -\-> -->
<!-- <\!-\-                   <artifactId>datanucleus-core</artifactId> -\-> -->
<!-- <\!-\-                   <version>${datanucleusVersion}</version> -\-> -->
<!-- <\!-\-                </dependency> -\-> -->
<!--             </dependencies> -->
<!--          </plugin> -->
      </plugins>
      <pluginManagement>
         <plugins>
            <plugin>
               <groupId>org.eclipse.m2e</groupId>
               <artifactId>lifecycle-mapping</artifactId>
               <version>1.0.0</version>
               <configuration>
                  <lifecycleMappingMetadata>
                     <pluginExecutions>
                        <pluginExecution>
                           <pluginExecutionFilter>
                              <groupId>org.apache.maven.plugins</groupId>
                              <artifactId>maven-war-plugin</artifactId>
                              <versionRange>2.1.1</versionRange>
                              <goals>
                                 <goal>exploded</goal>
                              </goals>
                           </pluginExecutionFilter>
                           <action>
                              <execute />
                           </action>
                        </pluginExecution>
                        <!--<pluginExecution>
                           <pluginExecutionFilter>
                              <groupId>org.datanucleus</groupId>
                              <artifactId>maven-datanucleus-plugin</artifactId>
                              <versionRange>1.1.4</versionRange>
                              <goals>
                                 <goal>enhance</goal>
                              </goals>
                           </pluginExecutionFilter>
                           <action>
                              <execute />
                           </action>
                        </pluginExecution>-->
                     </pluginExecutions>
                  </lifecycleMappingMetadata>
               </configuration>
            </plugin>
         </plugins>
      </pluginManagement>
   </build>
</project>
