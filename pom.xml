<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- POM file generated with GWT webAppCreator -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.fortytwo.developers</groupId>
	<artifactId>mybudget0123</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>MyBudget0123</name>

	<properties>
		<!-- Convenience property to set the GAE version -->
		<gaeVersion>1.8.1.1</gaeVersion>
		<gaeHome>/Applications/eclipse/plugins/com.google.appengine.eclipse.sdkbundle_1.8.1.1/appengine-java-sdk-1.8.1.1</gaeHome>
		<datanucleusVersion>3.2.4</datanucleusVersion>
		<!-- Convenience property to set the GWT version -->
		<gwtVersion>2.5.1</gwtVersion>
		<!-- GWT needs at least java 1.5 -->
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<!-- Google App Engine libraries -->
		<dependency>
			<!-- this library provides the core appengine features -->
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-1.0-sdk</artifactId>
			<version>${gaeVersion}</version>
		</dependency>
		<dependency>
			<!-- this library provides experimental appengine features -->
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-labs</artifactId>
			<version>${gaeVersion}</version>
		</dependency>
		<dependency>
			<!-- required for app engine based unit tests -->
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-testing</artifactId>
			<version>${gaeVersion}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- required for app engine based unit tests -->
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-stubs</artifactId>
			<version>${gaeVersion}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- required for app engine based unit tests -->
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-tools-sdk</artifactId>
			<version>${gaeVersion}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Google App Engine supports both JPA1 and JPA2. JPA1: datanucleus 
				appengine plugin v1 (1.0.10) + datanucleus v1 (1.1.5) JPA2: datanucleus appengine 
				plugin v2 (2.1.1) + datanucleus v3 (3.1.1) -->
			<groupId>com.google.appengine.orm</groupId>
			<artifactId>datanucleus-appengine</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
		 <!-- Google App Engine supports both JPA1 and JPA2.
   JPA1: datanucleus appengine plugin v1 (1.0.10) + datanucleus v1 (1.1.5)
   JPA2: datanucleus appengine plugin v2 (2.1.1) + datanucleus v3 (3.1.1) -->
         <groupId>com.google.appengine.orm</groupId>
         <artifactId>datanucleus-appengine</artifactId>
         <version>1.0.10</version>
      </dependency>
      <dependency>
         <!-- datanucleus-core is not needed for compilation. in fact, it cannot have compile 
   scope because the datanucleus plugin automatically adds it during enhancement and complains
   if there are two copies. app should not depend on any classes in this lib anyways. -->
         <groupId>org.datanucleus</groupId>
         <artifactId>datanucleus-core</artifactId>
         <version>${datanucleusVersion}</version>
         <scope>runtime</scope>
         <exclusions>
            <exclusion>
               <groupId>javax.transaction</groupId>
               <artifactId>transaction-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <!-- normally this library is only needed when using JDO however datanucleus throws 
   some JDO exceptions even when using JPA. there are several places in our code that 
   explicitly catch these JDO exceptions therefore it is needed during compilation -->
         <groupId>javax.jdo</groupId>
         <artifactId>jdo2-api</artifactId>
         <version>2.3-eb</version>
         <exclusions>
            <exclusion>
               <groupId>javax.transaction</groupId>
               <artifactId>transaction-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <!-- End Google App Engine libraries -->
		<!-- GWT Dependencies -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwtVersion}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwtVersion}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<classifier>sources</classifier>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Generate compiled stuff in the folder used for developing mode -->
		<outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

		<plugins>
			<!-- GAE Maven Plugin -->
			<plugin>
				<groupId>com.google.appengine</groupId>
				<artifactId>appengine-maven-plugin</artifactId>
				<version>${gaeVersion}</version>
			</plugin>
			<!-- GWT Maven Plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.5.1</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>test</goal>
							<!--<goal>i18n</goal> <goal>generateAsync</goal> -->
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
				<configuration>
					<runTarget>MyBudget0123.html</runTarget>
					<hostedWebapp>${webappDirectory}</hostedWebapp>
					<i18nMessagesBundle>org.fortytwo.developers.mybudget0123.client.Messages</i18nMessagesBundle>
					<appEngineVersion>${gaeVersion}</appEngineVersion>
					<appEngineHome>${gaeHome}</appEngineHome>
					<!-- Normally the gwt maven plugin executes dev mode using a builtin 
						jetty server. This config property instructs the gwt maven plugin to execute 
						dev mode using the jetty server supplied by the appengine sdk. -->
					<server>com.google.appengine.tools.development.gwt.AppEngineLauncher</server>
				</configuration>
			</plugin>

			<!-- Copy static web files before executing gwt:run -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>exploded</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<webappDirectory>${webappDirectory}</webappDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>gwt-maven-plugin</artifactId>
										<versionRange>[2.4.0,)</versionRange>
										<goals>
											<goal>resources</goal>
											<goal>compile</goal>
											<goal>i18n</goal>
											<goal>generateAsync</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.datanucleus</groupId>
										<artifactId>maven-datanucleus-plugin</artifactId>
										<versionRange>1.1.4</versionRange>
										<goals>
											<goal>enhance</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-war-plugin</artifactId>
										<versionRange>[2.1.1,)</versionRange>
										<goals>
											<goal>exploded</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>

							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.datanucleus</groupId>
					<artifactId>maven-datanucleus-plugin</artifactId>
					<version>1.1.4</version>
					<configuration>
						<api>JDO</api>
						<!-- <mappingIncludes>org/styleguise/marketplace/core/shared/**/*.class, 
							net/styleguise/marketplace/server/**/*.class</mappingIncludes> -->
						<verbose>true</verbose>
					</configuration>
					<executions>
						<execution>
							<!-- classes get enhanced immediately after compile phase -->
							<phase>process-classes</phase>
							<goals>
								<goal>enhance</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<!-- enhancement requires the gwt-user jar because many of the entity 
								classes implement IsSerializable and the enhancer needs it on the classpath 
								to function. because the gwt-user library has a scope of provided, it is 
								only available on the compilation and test classpath, and is not transitive 
								to the ehancement classpath. -->
							<groupId>com.google.gwt</groupId>
							<artifactId>gwt-user</artifactId>
							<version>${gwtVersion}</version>
						</dependency>
						<dependency>
							<!-- force maven-datanucleus-plugin to use the same version of datanucleus-core -->
							<groupId>org.datanucleus</groupId>
							<artifactId>datanucleus-core</artifactId>
							<version>${datanucleusVersion}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
